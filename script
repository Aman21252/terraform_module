# main.tf

# IAM Role for Image Builder Lifecycle Management
resource "aws_iam_role" "image_builder_role" {
  name = "image-builder-lifecycle-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action    = "sts:AssumeRole",
        Effect    = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

# Attach necessary policies to the role
resource "aws_iam_role_policy_attachment" "image_builder_policy" {
  role       = aws_iam_role.image_builder_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
}

# AMI Lifecycle Policy with DLM
resource "aws_dlm_lifecycle_policy" "golden_image_ami_lifecycle" {
  description        = "Lifecycle policy for ECP Golden Images AMIs"
  execution_role_arn = aws_iam_role.image_builder_role.arn

  policy_details {
    resource_types = ["IMAGE"]

    # Target AMIs by tag
    target_tags = {
      "Purpose" = var.lifecycle_tag
    }

    schedules {
      name = "ECP Golden Image Lifecycle"

      # AMI Deprecation Rule
      create_rule {
        interval      = 1
        interval_unit = "DAYS"
      }

      retain_rule {
        count = 1
      }

      deprecation_rule {
        interval      = var.deprecate_after_days
        interval_unit = "DAYS"
      }

      # Disable usage after specified days
      # Note: AWS DLM does not support disabling, so custom automation is required
      # Custom Lambda can modify AMI permissions to "none" for disabling

      delete_rule {
        interval      = var.delete_after_days
        interval_unit = "DAYS"
      }
    }
  }
}
